#!/usr/bin/python3

import sys
import socket
import json
from threading import Thread, Lock
from random import randrange as rand
from datetime import date
from typing import List, Tuple, Optional

dev = False


def printd(*args):
    if dev:
        print('[Debug]', args)


class TcpSocket:

    def __init__(self, first, second=None):
        if not second:
            # first = socket
            self.socket = first
        else:
            # first = ip, second = port
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.connect((first, second))

        self.stream = self.socket.makefile('rw')

    def writeLine(self, message: str):
        printd('tcp send:', message)
        self.stream.write(message + '\n')
        self.stream.flush()

    def readLine(self) -> str:
        while True:
            line = self.stream.readline()
            if not line:
                raise IOError
            if len(line) <= 1:
                continue
            line = line[:-1]
            printd('tcp get:', line)
            return line

    def getSock(self):
        return self.socket.getsockname()

    def getPeer(self):
        return self.socket.getpeername()

    def close(self):
        self.stream.close()
        self.socket.close()


class TcpServerSocket:

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def listen(self, addr: str, port: int):
        self.socket.bind((addr, port))
        self.socket.listen()

    def accept(self) -> TcpSocket:
        return TcpSocket(self.socket.accept()[0])

    def getSock(self):
        return self.socket.getsockname()

    def close(self):
        self.socket.close()


class UdpSocket:

    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def listen(self, addr: str, port: int):
        self.socket.bind((addr, port))

    def receive(self):
        data, addr = self.socket.recvfrom(4096)
        data = data.decode('utf-8')
        printd('udp get:', data)

        def replyFunc(message: str):
            printd('udp send:', message)
            message = message.encode('utf-8')
            self.socket.sendto(message, addr)

        return data, replyFunc

    def send(self, addr: str, port: int, message: str):
        printd('udp send:', message)
        message = message.encode('utf-8')
        self.socket.sendto(message, (addr, port))

    def close(self):
        self.socket.close()


class BadCommandError(Exception):
    def __init__(self, message: str):
        self.reason = message


BUF_SIZE = 4096
postId = 0
postIdLock = Lock()


def nextPostId():
    global postId
    postIdLock.acquire()
    postId = postId + 1
    ret = postId
    postIdLock.release()
    return postId


def ok(msg: Optional[str] = None):
    if msg:
        return {'status': 200, 'message': msg}
    else:
        return {'status': 200}


def bad(msg: str):
    return {'status': 400, 'message': msg}


def isInt(x: str):
    try:
        int(x)
        return True
    except ValueError:
        return False


POST_NOT_EXISTS = bad('Post does not exist.')


def validateTokens(usage: Tuple[str], reqInt: Tuple[int] = ()):
    def wrapper(f):
        def inner(self, tokens):
            usageList = list(map(lambda x: '<%s>' % x, usage))
            error = BadCommandError('Usage: %s %s' %
                                    (tokens[0], ' '.join(usageList)))
            if len(tokens) != len(usage) + 1:
                raise error
            for index in reqInt:
                if not isInt(tokens[index]):
                    raise error
            return f(self, tokens)

        return inner
    return wrapper


clientList = {}
userList = {}
boardList = {}
postList = {}
chatroomList = {}


class Client:

    username = None

    def requireUserLoggedIn(self):
        if not self.username:
            raise BadCommandError('Please login first.')

    @validateTokens(('port', ), (1,))
    def createChatroom(self, tokens):
        self.requireUserLoggedIn()

        if self.username in chatroomList:
            return bad('User has already created the chatroom.')

        port = int(tokens[1])
        chatroomList[self.username] = {
            'port': port,
            'addr': self.tcpSocket.getPeer()[0],
            'open': True
        }
        return {
            'status': 200,
            'port': port,
            'username': self.username
        }

    @validateTokens(())
    def listChatroom(self, tokens):
        self.requireUserLoggedIn()
        msg = 'Chatroom_name\tStatus'
        for k in chatroomList:
            msg += '\n%s\t%s' % (k,
                                 'open' if chatroomList[k]['open'] else 'close')
        return ok(msg)

    @validateTokens(())
    def closeChatroom(self, tokens):
        self.requireUserLoggedIn()
        if not self.username in chatroomList:
            return bad('Please create-chatroom first.')
        chatroomList[self.username]['open'] = False
        return ok()

    @validateTokens(())
    def attachChatroom(self, tokens):
        self.requireUserLoggedIn()
        if not self.username in chatroomList:
            return bad('Please create-chatroom first.')
        if not chatroomList[self.username]['open']:
            return bad('Please restart-chatroom first.')
        return {
            'status': 200,
            'port': chatroomList[self.username]['port'],
            'username': self.username
        }

    @validateTokens(('chatroom_name', ))
    def joinChatroom(self, tokens):
        self.requireUserLoggedIn()
        crName = tokens[1]
        if crName not in chatroomList:
            return bad('The chatroom does not exist or the chatroom is close.')
        if not chatroomList[crName]['open']:
            return bad('The chatroom does not exist or the chatroom is close.')

        return {
            'status': 200,
            'port': chatroomList[crName]['port'],
            'addr': chatroomList[crName]['addr'],
            'username': self.username
        }

    @validateTokens(())
    def restartChatroom(self, tokens):
        self.requireUserLoggedIn()
        if self.username not in chatroomList:
            return bad('Please create-chatroom first.')
        if chatroomList[self.username]['open']:
            return bad('Your chatroom is still running.')
        chatroomList[self.username]['open'] = True
        return {
            'status': 200,
            'port': chatroomList[self.username]['port'],
            'username': self.username
        }

    @validateTokens(('boardname', ))
    def createBoard(self, tokens):
        self.requireUserLoggedIn()

        b = tokens[1]
        if b in boardList:
            return bad('Board already exists.')

        boardList[b] = {
            'moderator': self.username,
            'posts': set()
        }
        return ok('Create board successfully.')

    def createPost(self, tokens):
        usage = BadCommandError(
            'Usage: create-post <board-name> --title <title> --content <content>')
        if len(tokens) < 3:
            raise usage
        try:
            titleIndex = tokens.index('--title')
            contentIndex = tokens.index('--content')
            if titleIndex <= 1 or contentIndex <= 1:
                raise usage
        except ValueError:
            raise usage

        self.requireUserLoggedIn()

        b = tokens[1]
        if b not in boardList:
            return bad('Board does not exist.')

        postTitle = None
        postContent = None
        if titleIndex < contentIndex:
            postTitle = ' '.join(tokens[titleIndex+1:contentIndex])
            postContent = ' '.join(tokens[contentIndex+1:])
        else:
            postTitle = ' '.join(tokens[titleIndex+1:])
            postContent = ' '.join(tokens[contentIndex+1:titleIndex])
        postContent = postContent.replace('<br>', '\n')

        id = nextPostId()
        boardList[b]['posts'].add(id)
        postList[id] = {
            'content': postContent,
            'title': postTitle,
            'comments': [],
            'date': date.today(),
            'author': self.username,
            'board': b
        }
        return ok('Create post successfully.')

    @validateTokens(())
    def listBoard(self, tokens):
        ret = 'Index\tName\tModerator'
        index = 0
        for b in boardList:
            index = index + 1
            ret += '\n%d\t%s\t%s' % (index, b, boardList[b]['moderator'])
        return ok(ret)

    @validateTokens(('board-name', ))
    def listPost(self, tokens):
        b = tokens[1]

        if b not in boardList:
            return bad('Board does not exist.')

        ret = 'S/N\tTitle\tAuthor\tDate'
        for pid in boardList[b]['posts']:
            post = postList[pid]
            ret += '\n%d\t%s\t%s\t%s' % (pid, post['title'],
                                         post['author'], post['date'].strftime('%m/%d'))
        return ok(ret)

    @validateTokens(('post-S/N', ), (1,))
    def read(self, tokens):
        id = int(tokens[1])
        if id not in postList:
            return POST_NOT_EXISTS

        post = postList[id]
        ret = 'Author: %s\nTitle: %s\nDate: %s\n--\n%s\n--' % (
            post['author'], post['title'], post['date'].strftime('%m/%d'), post['content'])
        for c in postList[id]['comments']:
            ret += '\n%s: %s' % (c['author'], c['content'])
        return ok(ret)

    @validateTokens(('username', 'password'))
    def login(self, tokens):
        if self.username:
            return bad('Please logout first.')

        u, p = tokens[1:]
        if u not in userList or userList[u]['passwd'] != p:
            return bad('Login failed.')

        self.username = u
        self.secret = rand(1 << 31)
        clientList[self.secret] = self
        return {
            'status': 200,
            'message': 'Welcome, %s.' % (u, ),
            'secret': self.secret
        }

    @validateTokens(())
    def listUser(self, tokens):
        res = 'Name\tEmail\n'
        for u in userList:
            res += '%s\t%s\n' % (u, userList[u].email)

        return ok(res)

    @validateTokens(())
    def logout(self, tokens):
        self.requireUserLoggedIn()

        if self.username in chatroomList and chatroomList[self.username]['open']:
            return bad('Please do "attach" and "leave-chatroom" first.')

        u = self.username
        s = self.secret
        self.username = None
        self.secret = None
        if u in chatroomList:
            del chatroomList[u]
        if s in clientList:
            del clientList[s]

        return ok('Bye, %s.' % u)

    @validateTokens(())
    def whoami(self, tokens):
        self.requireUserLoggedIn()
        return ok(self.username)

    @validateTokens(('username', 'email', 'password'))
    def register(self, tokens):
        u, e, p = tokens[1:]
        if u in userList:
            return bad('Username is already used.')

        userList[u] = {'email': e, 'passwd': p}
        return ok('Register successfully.')

    @validateTokens(('post-S/N', ), (1,))
    def deletePost(self, tokens):
        self.requireUserLoggedIn()

        id = int(tokens[1])
        if id not in postList:
            return POST_NOT_EXISTS

        owner = postList[id]['author']
        if self.username != owner:
            return bad('Not the post owner.')

        b = postList[id]['board']
        boardList[b]['posts'].remove(id)
        del postList[id]
        return ok('Delete successfully.')

    def updatePost(self, tokens):
        postTitle = None
        postContent = None
        if '--title' in tokens and '--content' in tokens:
            titleIndex = tokens.index('--title')
            contentIndex = tokens.index('--content')
            if titleIndex < contentIndex:
                postTitle = ' '.join(tokens[titleIndex + 1: contentIndex])
                postContent = ' '.join(tokens[contentIndex + 1])
            else:
                postTitle = ' '.join(tokens[titleIndex + 1])
                postContent = ' '.join(tokens[contentIndex + 1: titleIndex])
        elif '--title' in tokens:
            titleIndex = tokens.index('--title')
            postTitle = ' '.join(tokens[titleIndex + 1:])
        elif '--content' in tokens:
            contentIndex = tokens.index('--content')
            postContent = ' '.join(tokens[contentIndex + 1:])
        else:
            return bad(
                'Usage: update-post <post-S/N> --title/content <new>')

        self.requireUserLoggedIn()

        try:
            id = int(tokens[1])
            if id not in postList:
                return POST_NOT_EXISTS
        except:
            return POST_NOT_EXISTS

        if postList[id]['author'] != self.username:
            return bad('Not the post owner.')

        if postTitle:
            postList[id]['title'] = postTitle
        if postContent:
            postContent = postContent.replace('<br>', '\n')
            postList[id]['content'] = postContent
        return ok('Update successfully.')

    def comment(self, tokens):
        if len(tokens) < 3:
            return bad('Usage: comment <post-S/N> <comment>')

        self.requireUserLoggedIn()

        try:
            id = int(tokens[1])
            if id not in postList:
                return POST_NOT_EXISTS
        except:
            return POST_NOT_EXISTS

        postList[id]['comments'].append({
            'author': self.username,
            'content': ' '.join(tokens[2:])
        })
        return ok('Comment successfully.')

    def consume(self, message: str):
        message = message.strip()
        if len(message) == 0:
            return None

        tokens = message.split()
        try:
            return {
                'list-user': self.listUser,
                'login': self.login,
                'logout': self.logout,
                'whoami': self.whoami,
                'register': self.register,
                'consume': self.consume,
                'create-board': self.createBoard,
                'create-post': self.createPost,
                'list-board': self.listBoard,
                'list-post': self.listPost,
                'update-post': self.updatePost,
                'comment': self.comment,
                'delete-post': self.deletePost,
                'read': self.read,
                'create-chatroom': self.createChatroom,
                'join-chatroom': self.joinChatroom,
                'close-chatroom': self.closeChatroom,
                'attach': self.attachChatroom,
                'restart-chatroom': self.restartChatroom,
                'list-chatroom': self.listChatroom
            }.get(tokens[0], self.unknown)(tokens)
        except BadCommandError as e:
            return bad(e.reason)

    def unknown(self, tokens):
        return bad('Unknown command: `%s`.' % (tokens[0]))

    def notifyUdpMessage(self, message: str, replier):

        ret = self.consume(message)
        if ret:
            replier(json.dumps(ret))

    def tcpPlayground(self):
        try:
            while True:
                req = self.tcpSocket.readLine()
                req = json.loads(req)
                reply = self.consume(req['message'])
                if reply:
                    reply = json.dumps(reply)
                    self.tcpSocket.writeLine(reply)
        except IOError:
            self.tcpSocket.close()

        print('A client is closed')

    def __init__(self, sc: TcpSocket):
        self.tcpSocket = sc


def runTcpServer(port: int):

    tcpServer = TcpServerSocket()
    tcpServer.listen('127.0.0.1', port)

    while True:
        sc = tcpServer.accept()
        print('New Connection.')

        client = Client(sc)

        t = Thread(target=client.tcpPlayground)
        t.daemon = True
        t.start()

    print('Tcp server is shutdown.')


def runUdpServer(port: int):
    udpServer = UdpSocket()
    udpServer.listen('127.0.0.1', port)
    while True:
        data, rep = udpServer.receive()
        try:
            data = json.loads(data)
            if data['secret'] in clientList:
                clientList[data['secret']].notifyUdpMessage(data['message'], rep)
            else:
                rep(json.dumps(bad('Please login first.')))
        except ValueError:
            # Invalid format message, may be an attack
            pass

    print('Udp server is shutdown.')


def main():
    global dev

    if len(sys.argv) < 2:
        print('Usage: ./server <port>')
        exit(1)
    if len(sys.argv) >= 3 and sys.argv[2] == '--dev':
        dev = True
        userList['a'] = {'passwd': 'a', 'email': 'a'}
        userList['b'] = {'passwd': 'b', 'email': 'b'}
        userList['c'] = {'passwd': 'c', 'email': 'c'}

    port = int(sys.argv[1])

    udpThread = Thread(target=runUdpServer, args=(port,))
    udpThread.daemon = True
    udpThread.start()

    runTcpServer(port)


if __name__ == '__main__':
    main()
