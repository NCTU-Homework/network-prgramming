#!/usr/bin/python3

import socket
import sys
import threading
import json

BUF_SIZE = 4096


def validateTokSize(usage):
    def wrapper(f):
        def inner(self, tokens):
            if len(tokens) == len(usage) + 1:
                return f(self, tokens)
            else:
                usageList = list(map(lambda x: "<%s>" % x, usage))
                return {
                    "status": 400,
                    "message": "Usage: %s %s" % (tokens[0], ' '.join(usageList))
                }
        return inner
    return wrapper


users = {}


class Client:

    username = None

    @validateTokSize(("username", "password"))
    def login(self, tokens):
        global users

        if self.username:
            return {
                "status": 400,
                "message": "Please logout first."
            }

        u, p = tokens[1:]
        if u not in users or users[u]["passwd"] != p:
            return {
                "status": 400,
                "message": "Login failed."
            }

        self.username = u
        return {
            "status": 200,
            "message": "Welcome, %s." % u,
        }

    @validateTokSize(())
    def listUser(self, tokens):
        global users

        res = "Name\tEmail\n"
        for u in users:
            res += "%s\t%s\n" % (u, users[u].email)

        return {
            "status": 200,
            "message": res
        }

    @validateTokSize(())
    def logout(self, tokens):
        if not self.username:
            return {
                "status": 400,
                "message": "Please login first."
            }

        u = self.username
        self.username = None
        return {
            "status": 200,
            "message": "Bye, %s." % u
        }

    @validateTokSize(())
    def whoami(self, tokens):
        if not self.username:
            return {
                "status": 400,
                "message": "Please login first."
            }

        return {
            "status": 200,
            "message": self.username
        }

    @validateTokSize(("username", "email", "password"))
    def register(self, tokens):
        global users

        u, e, p = tokens[1:]
        if u in users:
            return {
                "status": 400,
                "message": "Username is already used."
            }

        users[u] = {"email": e, "passwd": p}
        return {
            "status": 200,
            "message": "Register successfully."
        }

    def consume(self, message: str):
        message = message.strip()
        if len(message) == 0:
            return None

        tokens = message.split()
        return {
            'list-user': self.listUser,
            'login': self.login,
            'logout': self.logout,
            'whoami': self.whoami,
            'register': self.register,
            'consume': self.consume
        }.get(tokens[0], self.unknown)(tokens)

    def unknown(self, tokens):
        # should not happen
        return {
            "status": 400, 
            "message": "Unknown command: `%s`." % (tokens[0])
        }

    def run(self):
        while True:
            data, _ = self.sc.recvfrom(BUF_SIZE)
            if not data:
                return

            data = data.decode('utf-8')
            reply = self.consume(data)
            if reply:
                reply = json.dumps(reply)
                print("TCP: `%s`" % reply)
                self.sc.send(reply.encode('utf-8'))

    def __init__(self, sc: socket.socket):
        print("New Connection.")
        self.sc = sc


def runTcpServer(port: int):

    ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ss.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    ss.bind(("127.0.0.1", port))
    ss.listen()

    while True:
        sc, _ = ss.accept()

        def createTcpPlayground():
            Client(sc).run()

        t = threading.Thread(target=createTcpPlayground)
        t.daemon = True
        t.start()


def main():
    if len(sys.argv) != 2:
        print("Usage: ./server <port>")
        exit(1)

    port = int(sys.argv[1])
    runTcpServer(port)


if __name__ == "__main__":
    main()
